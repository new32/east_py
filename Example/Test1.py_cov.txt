edat:      /home/new32/code/clang/east-test/East/Test1.py.edat
ecov:      /home/new32/code/clang/east-test/East/Test1.py.ecov
source:    /home/new32/code/clang/east-test/East/Test1.py
generated: 2017-05-08 22:31:49

=====
Line   #000001|#!/usr/bin/env python3
Line   #000002|
Line   #000003|class Test1:
Line   #000004|  def __init__(self):
Line   #000005|    # only done as a class for testing purposes
Line + #000006|    pass
Line   #000007|
Line   #000008|  def and_test(self, in_a, in_b, in_c):
Line + #000009|    return in_a and in_b and in_c
000009.011|T/F|           in_a
000009.020|T/F|                    in_b
000009.029|T/F|                             in_c
Line   #000010|
Line   #000011|  def or_test(self, in_a, in_b, in_c):
Line + #000012|    return in_a or in_b or in_c
000012.011|T/F|           in_a
000012.019|T/F|                   in_b
000012.027|T/F|                           in_c
Line   #000013|
Line   #000014|  def xor_test(self, in_a, in_b):
Line + #000015|    return (in_a or in_b) and not (in_a and in_b)
000015.012|T/F|            in_a
000015.020|T/F|                    in_b
000015.030|T/F|                              not
000015.035|T/F|                                   in_a
000015.044|T/F|                                            in_b
Line   #000016|
Line   #000017|  def if_test1(self, in_a, in_b):
Line + #000018|    ret_val = -1
Line   #000019|    if in_a and in_b:
000019.004|T/F|    if
000019.007|T/F|       in_a
000019.016|T/F|                in_b
Line + #000020|      ret_val = 1
Line   #000021|    elif in_a:
000021.004|T/F|    elif
Line + #000022|      ret_val = 2
Line   #000023|    elif in_b:
000023.004|T/F|    elif
Line + #000024|      ret_val = 3
Line   #000025|    return ret_val
Line   #000026|
Line   #000027|  def if_test2(self, in_a):
Line + #000028|    ret_val = -1
Line   #000029|    if in_a:
000029.004|T/F|    if
Line + #000030|      ret_val = 1
Line   #000031|    return ret_val
Line   #000032|
Line   #000033|  def if_test3(self, in_a):
Line + #000034|    return -1 if not in_a else 1
000034.014|T/F|              if
000034.017|T/F|                 not
Line   #000035|
Line   #000036|  def for_test1(self, for_vals):
Line + #000037|    ret_val = 0
Line   #000038|    for aval in for_vals:
Line + #000039|      ret_val += int(aval)
Line   #000040|    return ret_val
Line   #000041|
Line   #000042|  def for_test2(self, in_val):
Line + #000043|    ret_val = 0
Line   #000044|    for a_val in ["AA", "AA", "AA"]:
Line + #000045|      if in_val != a_val:
000045.006|T/F|      if
000045.009|T/F|         in_val...
Line + #000046|        ret_val += 1
Line   #000047|        break
Line   #000048|    else:
Line + #000049|      ret_val += 100
Line   #000050|    return ret_val
Line   #000051|
Line   #000052|  def while_test1(self, loop_count):
Line + #000053|    count = 0
Line   #000054|    while count < loop_count:
000054.004|T/F|    while
000054.010|T/F|          count...
Line + #000055|      count += 1
Line   #000056|    return count
Line   #000057|
Line   #000058|  def while_test2(self, loop_count, limit):
Line + #000059|    count = 0
Line   #000060|    while count < loop_count:
000060.004|T/F|    while
000060.010|T/F|          count...
Line + #000061|      count += 1
Line   #000062|      if count == limit:
000062.006|T/F|      if
000062.009|T/F|         count...
Line + #000063|        count = 0
Line   #000064|        break
Line   #000065|    else:
Line + #000066|      count += 100
Line   #000067|    return count
Line   #000068|
Line   #000069|  def value_in_list(self, val, flag):
Line + #000070|    return (val in ["AA", "BB", "CC"]) and flag
000070.012|T/F|            val...
000070.043|T/F|                                           flag
Line   #000071|
Line   #000072|  def chain(self, in_a):
Line + #000073|    return (0 <= in_a <= 10)
000073.012|T/F|            0...
000073.017|T/F|                 in_a...
=====

Branches:   000009/000009
Conditions: 000022/000022
Blocks:     000025/000025

All coverage obtained
